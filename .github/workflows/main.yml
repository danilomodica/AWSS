name: CI

# Triggers the workflow on push or pull request events but only for the main branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

env:
  BUILD_TYPE: Release #CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  gmail_mail: "awss.unipv@gmail.com"
  psw_gmail: ${{ secrets.GMAIL_PASSWORD }}

jobs:
  terraform-python-test:
    runs-on: ubuntu-latest
    environment: Production

    steps:
    - uses: dorny/paths-filter@v2
        with:
          filters: |
            src:
              - '{{github.workspace}}/terraform/src/**'
    - if: steps.changes.outputs.src == 'true'
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: "3.9"
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 ${{github.workspace}}/terraform/src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 ${{github.workspace}}/terraform/src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    - name: Test with pytest
      run: |
        pytest ${{github.workspace}}/tests/

  docker-python-test:
    runs-on: ubuntu-latest
    environment: Production

    steps:
    - uses: dorny/paths-filter@v2
        with:
          filters: |
            src:
              - '{{github.workspace}}/docker/src/run.py'
    - if: steps.changes.outputs.src == 'true'
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: "3.9"
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 ${{github.workspace}}/docker/src/run.py --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 ${{github.workspace}}/docker/src/run.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true

  c-test:
    runs-on: ubuntu-latest
    environment: Production

    steps:
    - uses: dorny/paths-filter@v2
        with:
          filters: |
            src:
              - '{{github.workspace}}/docker/src/lcs_algorithm.c'
    - if: steps.changes.outputs.src == 'true'
    - uses: actions/checkout@v3

      working-directory: ${{github.workspace}}/docker/src/
    - name: make
      run: make

      working-directory: ${{github.workspace}}/tests/
    - name: Test
      run: |
        echo "::set-output name=check-diff::$(./c-test.sh)"
      if: steps.check.outputs.triggered == 'false'

  docker-container:
    runs-on: ubuntu-latest
    needs: [c-test,docker-python-test]
    environment: Production

    steps:
    - uses: dorny/paths-filter@v2
        with:
          filters: |
            src:
              - '{{github.workspace}}/docker/**'
    - if: steps.changes.outputs.src == 'true'
    - name: Checkout
      uses: actions/checkout@v3

      name: Build, tag, and push image to Amazon ECR
      id: build-image
      run: |
        docker build -t lcs-container .

  terraform:
    name: 'Terraform'
    needs: python-test
    runs-on: ubuntu-latest
    environment: Production

    outputs:
      output-region: ${{ steps.apply.outputs.region }}
      output-ecr-repo: ${{ steps.apply.outputs.repository }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        working-directory: terraform
        shell: bash

    steps:
    - uses: dorny/paths-filter@v2
        with:
          filters: |
            src:
              - '{{github.workspace}}/terraform/**'
              - '{{github.workspace}}/web-interface/**'
    - if: steps.changes.outputs.src == 'true'
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      id: setup
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: format
      run: terraform fmt -check
      continue-on-error: true

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      run: terraform plan

      # On push to main, build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      id: apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        terraform apply -auto-approve
        echo "::set-output name=region::$(terraform output region)"
        echo "::set-output name=repository::$(terraform output ecs-repo)"


  deploy-ecs:
    name: ecs-deploy
    needs: [terraform, docker-container]
    runs-on: ubuntu-latest
    environment: Production

     steps:
    - uses: dorny/paths-filter@v2
        with:
          filters: |
            src:
              - '{{github.workspace}}/docker/**'
              - '{{github.workspace}}/terraform/ecs.tf'
              - '{{github.workspace}}/terraform/main.tf'
    - if: steps.changes.outputs.src == 'true'
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{needs.terraform.outputs.region}}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

      name: Push image to Amazon ECR
      id: push-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker tag lcs-container $ECR_REGISTRY/${{needs.terraform.outputs.repository}}:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/${{needs.terraform.outputs.repository}}:$IMAGE_TAG"